/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/pathogenseq Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {


    // Input options
    input                      = './'
    outdir                     =  './results'
    platform                     = 'illumina'
    igenomes_ignore             = true

    //database
    hostile_ref_dir = '/nfs/APL_Genomics/db/prod/hostile/hostile2'
    hostile_ref_name_illumina = 'human-t2t-hla.argos-bacteria-985_rs-viral-202401_ml-phage-202401'
    hostile_ref_name_nanopore = "human-t2t-hla.argos-bacteria-985_rs-viral-202401_ml-phage-202401.mmi"
    hostile_human_ref_minimap2       = '/nfs/APL_Genomics/db/prod/hostile/minimap2_ref/human-t2t-hla-argos985.fa.gz'
    hostile_human_ref_bowtie2       = '/nfs/APL_Genomics/db/prod/hostile/bowtie2_indexes/human-t2t-hla-argos985'
    kraken2_db = "/nfs/APL_Genomics/db/prod/kraken2/k2_standard_08gb_20220926"
    bakta_db = "/nfs/APL_Genomics/db/prod/bakta/db"
    checkm2_db = "/nfs/APL_Genomics/db/prod/CheckM2_database/uniref100.KO.1.dmnd"
    gtdbtk_db = "/nfs/APL_Genomics/db/prod/gtdbtk/release226"
    gtdbtk_mash_db = "/nfs/APL_Genomics/db/prod/gtdbtk/release226/mash/gtdbtk.gtdb_ref_sketch.msh"
    amrfinderplus_db = "/nfs/APL_Genomics/db/prod/AMRFinderPlus/latest"
    gambit_db = "/nfs/APL_Genomics/db/prod/gambit"


    //illumina qc parameters
    skip_illumina_reads_qc         = false
    illumina_reads_qc_tool         = 'fastp'  //allowed options are: bbduk|fastp
    skip_illumina_dehost            = false
    skip_illumina_kraken2                = false

    //illumina assembly
    skip_illumina_reads_assembly   = false
    min_tbp_for_assembly_illumina = 1000000
    illumina_reads_assembler       = 'unicycler' //megahit|skesa|spades|unicycler|shovill

    // nanopre qc parameters
    check_gpu = false
    skip_nanopore_reads_qc          = false
    nanopore_reads_qc_tool         = 'fastplong'  //allowed options are: fastplong|porechop, chopper
    skip_nanopore_dehost                = false
    nanopore_reads_assembler        = 'flye+medaka'
    skip_nanopore_kraken2                = false

    //nanopore assembly
    skip_nanopore_reads_assembly    = false
    min_tbp_for_assembly_nanopore = 1000000
    skip_recenter_genome = false
    skip_nanopore_reads_polish = false
    nanopore_reads_polisher = "medaka" // allowed options are: medak|dorado

    //illumina read polish
    skip_illumina_reads_polish  = false
    skip_polypolish             = false
    skip_polca                  = false
    skip_pypolca                  = false

    //consensus analysis and annotation
    skip_checkm2                = false
    skip_gtdbtk                 = false
    skip_gambit                 = false
    //skip_depth_and_coverage     = false
    skip_depth_and_coverage_illumina     = false
    skip_depth_and_coverage_nanopore     = false
    skip_bakta                  = false
    skip_mlst                   = false
    skip_mobsuite               = false
    skip_virulome               = false
    skip_amr                    = false

    // organism specific funcitons
    // set to true to enable Mycobacterium tuberculosis WGS analysis
    //to predict lineage and drug resistance
    skip_tbprofiler                  = true
    //true for emm-typing of Streptococcus pyogenes
    skip_emmtyper                    = true
    //capsular type to Streptococcus pneumoniae
    skip_pneumocat                   = true
    //serotype for GBS: s_agalactiae
    skip_gbssbg                       = true
    gbssbg_db = "/nfs/APL_Genomics/db/prod/gbs-sbg/GBS-SBG.fasta"
    // MultiQC options
    skip_multiqc = false
    multiqc_config             = null
    multiqc_title              = null
    multiqc_logo               = null
    max_multiqc_email_size     = '25.MB'

    // Boilerplate options
    tracedir                   = "${params.outdir}/pipeline_info"
    publish_dir_mode           = 'copy'
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    hook_url                   = null
    help                       = false
    version                    = false

      // Schema validation default options
    validationFailUnrecognisedParams = false
    validationLenientMode            = false
    validationSchemaIgnoreParams     = 'genomes,igenomes_base'
    validationShowHiddenParams       = false
    validate_params            = true
    schema_ignore_params       = 'genomes,modules'
    show_hidden_params         = false



    // Config options
    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_description = null
    config_profile_contact     = null
    config_profile_url         = null
    config_profile_name        = null


    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '64.GB'
    max_cpus                   = 8
    max_time                   = '240.h'

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load nf-core/pathogenseq custom profiles from different institutions.
// Warning: Uncomment only if a pipeline-specific instititutional config already exists on nf-core/configs!
// try {
//   includeConfig "${params.custom_config_base}/pipeline/pathogenseq.config"
// } catch (Exception e) {
//   System.err.println("WARNING: Could not load nf-core/config/pathogenseq profiles: ${params.custom_config_base}/pipeline/pathogenseq.config")
// }


profiles {
    debug {
        dumpHashes             = true
        process.beforeScript   = 'echo $HOSTNAME'
        cleanup = false
    }
    conda {
        conda.enabled          = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    mamba {
        conda.enabled          = true
        conda.useMamba         = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    docker {
        docker.enabled         = true
        docker.registry        = 'quay.io'
        docker.userEmulation   = true
        conda.enabled          = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    arm {
        docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        conda.enabled          = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    podman {
        podman.enabled         = true
        podman.registry        = 'quay.io'
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    shifter {
        shifter.enabled        = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
    }
    charliecloud {
        charliecloud.enabled   = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        apptainer.enabled      = false
    }
    apptainer {
        apptainer.enabled      = true
        conda.enabled          = false
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    gitpod {
        executor.name          = 'local'
        executor.cpus          = 16
        executor.memory        = 60.GB
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
    pathogenseq      { includeConfig 'conf/pathogenseq.config'      }

}


// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}


// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    //file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}


manifest {
    name            = 'xiaoli-dong/pathogenseq'
    author          = """xiaoli-dong"""
    homePage        = 'https://github.com/xiaoli-dong/pathogenseq'
    description     = """pathogen illumina and nanopore WGS sequence analysis workflow"""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.1'
    version         = '1.1.4'
    doi             = ''
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
