/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: /CSVTK_CONCAT_.*/ {
        ext.args = " --ignore-illegal-row"
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: SAMPLESHEETCHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: FASTQC_INPUT {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/reads/illumina/input/fastqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*"
        ]
    }
    withName: SEQKIT_STATS_INPUT_ILLUMINA {
        ext.prefix = { "${meta.id}.input_seqstats" }
        ext.args = '-Ta '
        publishDir = [
            path: { "${params.outdir}/${meta.id}/reads/illumina/input" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: CSVTK_CONCAT_STATS_INPUT_ILLUMINA {
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: CSVTK_CONCAT_STATS_TRIMMED_ILLUMINA {
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: CSVTK_CONCAT_STATS_NOT_ASSEMBLED{
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },

        ]
    }


    withName: BBMAP_BBDUK {
        ext.args = [
            "ref=adapters,artifacts,phix",
            "ktrim=r",
            "k=23",
            "mink=11",
            "hdist=1",
            "tpe",
            "tbo",
            "maq=15",
            "trimq=10",
            "qtrim=r",
            "minlength=31"
        ].join(' ').trim()

        ext.prefix = { "${meta.id}.bbduk_trim" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/reads/illumina/qc/bbduk" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

    }
    withName: FASTQC_TRIMMED_BBDUK {
        ext.args = '--quiet'
        ext.prefix = { "${meta.id}.bbduk_trim" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/reads/illumina/qc/bbduk/fastqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }


    withName: SEQKIT_STATS_TRIMMED_BBDUK{
        ext.prefix = { "${meta.id}.bbduk_seqstats" }
        ext.args = '-Ta '
        publishDir = [
            path: { "${params.outdir}/${meta.id}/reads/illumina/qc/bbduk" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }


    withName: FASTP {
        ext.args = [
            "--cut_front",
            "--cut_front_window_size=1",
            "--cut_front_mean_quality=10",
            "--cut_tail",
            "--cut_tail_window_size=1",
            "--cut_tail_mean_quality=10",
            "--n_base_limit 0",
            "--qualified_quality_phred 20",
            "--average_qual 20",
            "--length_required 50",
            "--detect_adapter_for_pe"
        ].join(' ').trim()

        publishDir = [
            path: { "${params.outdir}/${meta.id}/reads/illumina/qc/fastp" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: FASTQC_TRIMMED_FASTP {
        ext.args = '--quiet'
        ext.prefix = { "${meta.id}.fastp_trim" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/reads/illumina/qc/fastp/fastqc" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: SEQKIT_STATS_TRIMMED_FASTP {
        ext.prefix = { "${meta.id}.fastp_seqstats" }
        ext.args = '-Ta '
        publishDir = [
            path: { "${params.outdir}/${meta.id}/reads/illumina/qc/fastp" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: HOSTILE_ILLUMINA{
        //ext.prefix = { "${meta.id}.dehost" }
        ext.args = '--force '
        publishDir = [
            path: { "${params.outdir}/${meta.id}/reads/illumina/dehost" },
            mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        enabled: true
        ]
    }
    withName: FASTQC_HOSTILE {
        ext.args = '--quiet'
        ext.prefix = { "${meta.id}.dehost" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/reads/illumina/dehost/fastqc" },

            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SEQKIT_STATS_HOSTILE_ILLUMINA {
        ext.prefix = { "${meta.id}.dehost_seqstats" }
        ext.args = '-Ta '
        publishDir = [
            path: { "${params.outdir}/${meta.id}/reads/illumina/dehost" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: CSVTK_CONCAT_STATS_HOSTILE_ILLUMINA{
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }


    withName: KRAKEN2_KRAKEN2_ILLUMINA {
        publishDir = [
            path: { "${params.outdir}/${meta.id}/taxonomy/illumina/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*report.txt"
        ]

    }
    withName: KRAKENTOOLS_COMBINEKREPORTS_ILLUMINA {
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },

        ]

    }

    withName: TBPROFILER_PROFILE_ILLUMINA {
        ext.prefix = { "${meta.id}.tbprofiler" }
        ext.args = [
            "--platform illumina",
            "--mapper bwa",
            "--caller bcftools",
            "--depth 0,10",
            "--af 0,0.1",
            "--call_whole_genome",
            "--csv",
            "--no_trim"
        ].join(' ').trim()
        //memory = '12 GB'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/tbprofiler/illumina" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },

        ]

    }
    withName: TBPROFILER_COLLATE_ILLUMINA {
        ext.prefix = { "tbprofiler_illumina" }
        publishDir = [
            path: { "${params.outdir}/report/tbprofiler/illumina" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]

    }

    withName: PNEUMOCAT {
        //ext.prefix = { "${meta.id}.pneumocat" }
        ext.args = '--cleanup'
        publishDir = [
            path: { "${params.outdir}/${meta.id}/pneumocat/illumina" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]

    }
    withName: COMBINE_XML_PNEUMOCAT {
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },

        ]
    }


    withName:  MINIMAP2_ALIGN_DEPTH_ILLUMINA {
            ext.prefix = { "${meta.id}.illumina" }
            ext.args = "-x sr"
            publishDir = [
                path: { "${params.outdir}/${meta.id}/depth/illumina" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*",
                enabled: false
            ]
    }
    withName: SAMTOOLS_SORT_DEPTH_ILLUMINA {
            ext.prefix = { "${meta.id}.illumina_sorted" }
            //ext.args = "-n"
            publishDir = [
                path: { "${params.outdir}/${meta.id}/depth/illumina" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                pattern: "*",
                enabled: true
            ]
    }


    withName: SAMTOOLS_INDEX_DEPTH_ILLUMINA {
        ext.prefix = { "${meta.id}.illumina_sorted" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/depth/illumina" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*",
            enabled: true
        ]
    }
    withName: SAMTOOLS_COVERAGE_DEPTH_ILLUMINA {
        ext.prefix = { "${meta.id}.contig_depth.illumina" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/depth/illumina" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*",

        ]
    }
    withName: MAPPINGREPORT_ILLUMINA {
        ext.prefix = { "${meta.id}.mapping_summary.illumina" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/depth/illumina" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*",
        ]
    }
    withName: CSVTK_CONCAT_DEPTH_ILLUMINA {
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },

        ]
    }

    withName: BAKTA_BAKTA {
        ext.prefix = { "${meta.id}.bakta" }
        ext.args = "--min-contig-length 200"
        publishDir = [
            path: { "${params.outdir}/${meta.id}/annotation/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*"
        ]
    }
    withName: GFF2FEATURES_BAKTA {
        ext.prefix = { "${meta.id}.bakta" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/annotation/bakta" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },

        ]

    }
    withName: CSVTK_CONCAT_STATS_BAKTA{
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },

        ]
    }

    withName: MOBSUITE_RECON {
        //ext.prefix = { "${meta.id}.mobsuite" }
        ext.prefix = ""
        publishDir = [
            path: { "${params.outdir}/${meta.id}/plasmid/mobsuite" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: '*.{contig_report.txt,mobtyper_results.txt,plasmid_*.fasta}'
        ]

    }
    withName: CSVTK_CONCAT_MOBTYPER_RESULTS {
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },

        ]
    }
    withName: CSVTK_CONCAT_CONTIG_REPORT {
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },

        ]
    }
    withName: CSVTK_FILTER2{
        ext.prefix = { "${meta.id}.contig_report.plasmid" }
        ext.args = " -f \'\$molecule_type==\"plasmid\"\' -t"
        publishDir = [
            path: { "${params.outdir}/${meta.id}/plasmid/mobsuite" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },

        ]
    }


withName: AMRFINDERPLUS_UPDATE {
    publishDir = [
        path: { "${params.outdir}/${meta.id}/amr/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        enabled: false
    ]

}
withName: AMRFINDERPLUS_RUN {
    ext.prefix = { "${meta.id}.amrfinderplus" }
    ext.args = {" --plus --ident_min 0.9 --coverage_min 0.5 --name ${meta.id}"}
    publishDir = [
        path: { "${params.outdir}/${meta.id}/amr/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },

    ]

}
withName: CSVTK_CONCAT_AMR{
    publishDir = [
        path: { "${params.outdir}/report" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },

    ]
}
withName: ABRITAMR_RUN {

    publishDir = [
        path: { "${params.outdir}/${meta.id}/amr/abritamr" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },

    ]

}
withName: GTDBTK_ANIREP {

    ext.args = { "--mash_db ${params.gtdbtk_mash_db}" }
    ext.prefix = {"${meta.id}.ani_rep"}
    publishDir = [
        path: { "${params.outdir}/${meta.id}/taxonomy/assembly/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        pattern: "*"

    ]

}



    withName: MLST {
        ext.prefix = { "${meta.id}.mlst" }
        publishDir = [
            path: { "${params.outdir}/${meta.id}/mlst/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },

        ]

    }
    withName: CSVTK_CONCAT_MLST{
        ext.args = "-H"
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },

        ]
    }

    withName: ABRICATE_RUN_VF {
        ext.prefix = { "${meta.id}.abricate" }
        ext.args = "--db vfdb --minid 80 --mincov 80 "
        publishDir = [
            path: { "${params.outdir}/${meta.id}/virulence/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            pattern: "*",
            //enabled: false
        ]

    }
    withName: ABRICATE_SUMMARY_VF {
        ext.prefix = { "${meta.id}.abricate" }
        publishDir = [
            path: { "${params.outdir}/report" },
            //path: { "${params.outdir}/virulence/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },

        ]

    }

        withName: CHECKM2_PREDICT{
        ext.args = " --force --allmodels"
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }


    withName: GAMBIT_QUERY {
        ext.prefix = { "${meta.id}.gambit_query" }
        ext.args = " -f csv "
        publishDir = [
            path: { "${params.outdir}/${meta.id}/taxonomy/assembly/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: GAMBIT_QUERY_COLLECT {
        ext.prefix = { "${meta.id}.gambit_query" }
        ext.args = " -f csv "
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }
    withName: GAMBIT_TREE {
        ext.prefix = { "${meta.id}.gambit_tree" }
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        ]
    }

    withName: EMMTYPER {
        //ext.prefix = { "${meta.id}.emmtyper" }
        ext.args = [
            "-f verbose",
            "-k",
            "-w blast",
            "--culling-limit 5",
            "--align-diff 12",
    "--percent-identity 90"
        ].join(' ').trim()

        publishDir = [
            path: { "${params.outdir}/${meta.id}/emmtyper" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]

    }
    withName: REFORMATEMMTYPERCSV {
        ext.prefix = { "${meta.id}.emmtyper" }

        publishDir = [
            path: { "${params.outdir}/${meta.id}/emmtyper" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]

    }
    withName: CSVTK_CONCAT_EMMTYPER{

        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }


    withName: GBS_SBG {
        ext.prefix = { "${meta.id}.gbssbg" }
        ext.args = "-best"
        publishDir = [
            path: { "${params.outdir}/${meta.id}/gbssbg" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]

    }

    withName: CSVTK_CONCAT_GBSSBG{
        ext.args = '-C \'$\' -I -E '
        publishDir = [
            path: { "${params.outdir}/report" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
    }


}

if (params.platform == 'nanopore') {
    includeConfig 'modules_nanopore.config'
}else if (params.platform == 'illumina') {
    includeConfig 'modules_illumina.config'
}
